import React, { useState, useRef, useEffect } from "react";
import { useUserGuardContext } from "app";
import { Header } from "components/Header";
// Footer removed per user request
import brain from "brain";
import { ChatMessage, ChatRequest } from "types";
import { ChatResponse, Source, EmailDialogState } from "utils/chat-types";
import { toast } from "sonner";
import RAGResponseCard from "components/RAGResponseCard";
import FollowUpPrompt from "components/FollowUpPrompt";
import { Mail, FileDown } from "lucide-react";
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Switch } from "@/components/ui/switch";

// Interface for tracking expanded state of sources
interface ExpandedState {
  [key: string]: boolean;
}

const Chat = () => {
  // Handle keyboard shortcuts
  const handleKeyDown = (e: React.KeyboardEvent) => {
    // Send message on Ctrl+Enter or Command+Enter
    if ((e.ctrlKey || e.metaKey) && e.key === 'Enter') {
      e.preventDefault();
      const form = document.getElementById('chat-form') as HTMLFormElement;
      if (form && message.trim()) {
        form.requestSubmit();
      }
    }
  };
  const { user } = useUserGuardContext();
  
  // Handle PDF export
  const handleExportPDF = async () => {
    try {
      // Don't export if there's only the welcome message
      if (conversation.length <= 1) {
        toast.error("There's nothing to export yet!");
        return;
      }

      setLoading(true);
      toast.info("Generating PDF...");

      // Prepare request with full conversation
      const response = await brain.export_conversation_as_pdf({
        conversation: conversation,
        title: "MediVault AI Consultation",
        include_timestamp: true
      });

      if (!response.ok) {
        throw new Error("Failed to generate PDF");
      }

      // Convert response to blob and download
      const blob = await response.blob();
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `MediVault_Consultation_${new Date().toISOString().split('T')[0]}.pdf`;
      document.body.appendChild(a);
      a.click();
      window.URL.revokeObjectURL(url);
      a.remove();

      toast.success("PDF downloaded successfully");
    } catch (error) {
      console.error("Error exporting PDF:", error);
      toast.error("Failed to generate PDF. Please try again.");
    } finally {
      setLoading(false);
    }
  };

  // Format content for email
  const formatEmailContent = (content: string, sources?: Source[]) => {
    // Note: Timestamp is handled by the backend API if includeTimestamp is true
    
    // Format sources if available
    let sourcesHtml = '';
    if (sources && sources.length > 0) {
      sourcesHtml = `
        <div style="margin-top: 20px; border-top: 1px solid #eee; padding-top: 10px;">
          <p style="font-weight: bold; color: #555;">Sources:</p>
          <ul style="padding-left: 20px;">
            ${sources.map(source => `
              <li style="margin-bottom: 8px;">
                <p><strong>${source.title || 'Document'}</strong>${source.url ? ` - <a href="${source.url}">${source.url}</a>` : ''}</p>
                <p style="color: #666; font-size: 0.9em;">${source.content?.substring(0, 150)}${source.content?.length > 150 ? '...' : ''}</p>
              </li>
            `).join('')}
          </ul>
        </div>
      `;
    }
    
    // Main content
    return `
      <div style="font-family: Arial, sans-serif; color: #333; max-width: 650px; margin: 0 auto;">
        <div style="background-color: #f5f9ff; padding: 15px; border-left: 4px solid #0089AD; margin-bottom: 20px;">
          <h2 style="margin-top: 0; color: #0089AD;">MediVault AI Consultation</h2>
        </div>
        
        <div style="line-height: 1.6;">
          ${content.replace(/\n/g, '<br>')}
        </div>
        
        ${sourcesHtml}
        
        <div style="margin-top: 30px; padding-top: 15px; border-top: 1px solid #eee; font-size: 0.9em; color: #777;">
          <p>This response was generated by MediVault AI based on your organization's trusted document repository.</p>
        </div>
      </div>
    `;
  };
  
  // Handle sending email
  const handleSendEmail = async () => {
    if (selectedMessage === null || !emailDialog.recipientEmail.trim()) return;
    
    // Get the selected message
    const messageToSend = conversation[selectedMessage];
    if (messageToSend.role !== 'assistant') return;
    
    try {
      // Format the email content with HTML
      const formattedContent = formatEmailContent(messageToSend.content, messageToSend.sources);
      
      // Send email using the API
      const response = await brain.send_chat_summary({
        recipient_email: emailDialog.recipientEmail,
        subject: emailDialog.subject,
        content: formattedContent,
        include_timestamp: emailDialog.includeTimestamp
      });
      
      if (response.ok) {
        toast.success("Email sent successfully");
        setEmailDialog(prev => ({ ...prev, isOpen: false }));
      } else {
        const errorData = await response.json();
        throw new Error(errorData.message || "Failed to send email");
      }
    } catch (error) {
      console.error("Error sending email:", error);
      toast.error("Failed to send email. Please try again.");
    }
  };
  const [message, setMessage] = useState<string>("");
  const [loading, setLoading] = useState<boolean>(false);
  // State for expanded sources removed since details feature was removed
  const [emailDialog, setEmailDialog] = useState<EmailDialogState>({
    isOpen: false,
    recipientEmail: "",
    subject: "MediVault AI Consultation Results",
    includeTimestamp: true,
  });
  const [selectedMessage, setSelectedMessage] = useState<number | null>(null);
  const [conversation, setConversation] = useState<Array<{ role: string; content: string; sources?: Source[] }>>([
    {
      role: "assistant",
      content: "Welcome to MediVault AI! I'm here to help answer your healthcare questions using your organization's trusted document repository. What would you like to know?",
    },
  ]);
  const messagesStartRef = useRef<HTMLDivElement>(null);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const [initialLoad, setInitialLoad] = useState<boolean>(true);

  // Scroll to top of messages
  const scrollToTop = () => {
    messagesStartRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  // Scroll to bottom of messages
  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    if (initialLoad) {
      setInitialLoad(false);
      scrollToTop();
    } else {
      scrollToBottom();
    }
  }, [conversation, initialLoad]);
  
  // Listen for window resize to adjust scroll
  useEffect(() => {
    const handleResize = () => {
      if (conversation.length > 1) {
        scrollToBottom();
      }
    };
    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, [conversation.length]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!message.trim()) return;
    
    // Add user message to conversation
    setConversation((prev) => [...prev, { role: "user", content: message }]);
    
    // Clear input field
    setMessage("");
    
    try {
      setLoading(true);
      
      // Format conversation history for API
      const historyForApi = conversation.map(msg => ({
        role: msg.role,
        content: msg.content
      }));
      
      // Prepare request
      const request: ChatRequest = {
        message: message,
        conversation_history: historyForApi as ChatMessage[]
      };
      
      // Call API
      const response = await brain.chat(request);
      const data: ChatResponse = await response.json();
      
      // Add assistant message to conversation
      const aiMessage = { 
        role: "assistant", 
        content: data.message, 
        sources: data.sources 
      };
      
      setConversation((prev) => [
        ...prev, 
        aiMessage
      ]);
    } catch (error) {
      console.error("Error sending message:", error);
      toast.error("Failed to get a response from the AI. Please try again.");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="flex flex-col min-h-screen bg-gray-50">
      <Header />
      
      <main className="flex-1 container mx-auto px-4 py-6 md:py-8 max-w-5xl">
        {/* Page header with instructions */}
        <div className="mb-6">
          <h1 className="text-2xl font-bold text-gray-800 mb-2">MediVault AI Assistant</h1>
          <p className="text-gray-600">
            Ask questions about medical topics using your organization's trusted document repository. 
            The AI will provide evidence-based answers with source references.
          </p>
        </div>
        <div className="bg-white shadow rounded-lg overflow-hidden h-[calc(100vh-320px)] md:h-[calc(100vh-300px)] flex flex-col border border-gray-200">
          {/* Chat messages */}
          <div className="flex-1 p-4 overflow-y-auto">
            <div ref={messagesStartRef} />
            <div className="space-y-4 pb-2">
              {conversation.map((msg, i) => (
                <div key={i} className={`flex ${msg.role === "user" ? "justify-end" : "justify-start"}`}>
                  <div className="max-w-3xl w-full relative group">
                    <RAGResponseCard 
                      content={msg.content} 
                      sources={msg.sources} 
                      role={msg.role}
                    />
                    {/* Follow-up prompt after AI messages (except welcome message) */}
                    {msg.role === "assistant" && i > 0 && (
                      <FollowUpPrompt
                        message="Would you like to ask another question about this topic or explore something new?"
                      />
                    )}
                    {/* Only show email button for AI responses (not the initial welcome message) */}
                    {msg.role === "assistant" && i > 0 && (
                      <button
                        onClick={() => {
                          setSelectedMessage(i);
                          setEmailDialog(prev => ({ ...prev, isOpen: true }));
                        }}
                        className="absolute top-2 right-2 bg-white bg-opacity-90 rounded-full p-1.5 shadow-sm border border-gray-200 opacity-0 group-hover:opacity-100 transition-opacity"
                        aria-label="Email this response"
                      >
                        <Mail className="h-4 w-4 text-gray-600" />
                      </button>
                    )}
                  </div>
                </div>
              ))}
              <div ref={messagesEndRef} />
            </div>
          </div>
          
          {/* Chat input */}
          <div className="border-t border-gray-200 p-4">
            <div className="flex justify-between mb-2">
              <div className="flex items-center text-xs text-gray-500 italic">
                <kbd className="px-2 py-1 bg-gray-100 border border-gray-300 rounded text-xs mr-1">Ctrl</kbd>
                <span className="mx-1">+</span>
                <kbd className="px-2 py-1 bg-gray-100 border border-gray-300 rounded text-xs mr-1">Enter</kbd>
                <span className="ml-2">to send</span>
              </div>
              <div className="flex space-x-3">
                <button 
                  type="button" 
                  onClick={() => {
                    // Find the last assistant message (excluding welcome message)
                    let lastAssistantIndex = -1;
                    for (let i = conversation.length - 1; i > 0; i--) {
                      if (conversation[i].role === "assistant") {
                        lastAssistantIndex = i;
                        break;
                      }
                    }
                    if (lastAssistantIndex > 0) {
                      setSelectedMessage(lastAssistantIndex);
                      setEmailDialog(prev => ({ ...prev, isOpen: true }));
                    } else {
                      toast.error("No AI responses to email yet!");
                    }
                  }}
                  disabled={loading || conversation.length <= 1}
                  className="text-xs text-gray-500 hover:text-gray-700 flex items-center"
                  title="Email consultation results"
                >
                  <Mail className="h-4 w-4 mr-1" />
                  Email
                </button>
                <button 
                  type="button" 
                  onClick={handleExportPDF}
                  disabled={loading || conversation.length <= 1}
                  className="text-xs text-gray-500 hover:text-gray-700 flex items-center"
                >
                  <FileDown className="h-4 w-4 mr-1" />
                  Export PDF
                </button>
                <button 
                  type="button" 
                  onClick={() => {
                    // Keep only the welcome message
                    setConversation([conversation[0]]);
                    scrollToTop();
                  }}
                  className="text-xs text-gray-500 hover:text-gray-700 flex items-center"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="mr-1">
                    <path d="M3 6h18"></path>
                    <path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6"></path>
                    <path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2"></path>
                  </svg>
                  Clear Chat
                </button>
              </div>
            </div>
            <form id="chat-form" onSubmit={handleSubmit} className="flex space-x-2">
              <input
                type="text"
                value={message}
                onChange={(e) => setMessage(e.target.value)}
                onKeyDown={handleKeyDown}
                disabled={loading}
                placeholder="Type your medical question here..."
                className="flex-1 border border-gray-300 rounded-md px-4 py-2 focus:outline-none focus:ring-2 focus:ring-[#0089AD]"
                aria-label="Chat message input"
              />
              <button
                type="submit"
                disabled={loading || !message.trim()}
                className="bg-[#0089AD] text-white px-4 py-2 rounded-md hover:bg-[#007a9b] focus:outline-none focus:ring-2 focus:ring-[#0089AD] disabled:bg-[#80c4d6] disabled:cursor-not-allowed flex items-center justify-center w-24"
              >
                {loading ? (
                  <svg className="animate-spin h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg>
                ) : "Send"}
              </button>
            </form>
          </div>
        </div>
      </main>
      
      {/* Footer removed */}

      {/* Email Dialog */}
      <Dialog open={emailDialog.isOpen} onOpenChange={(open) => setEmailDialog(prev => ({ ...prev, isOpen: open }))}>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle>Share via Email</DialogTitle>
            <DialogDescription>
              Send this consultation to any email address. Only the selected AI response will be shared.
            </DialogDescription>
          </DialogHeader>
          
          <div className="grid gap-4 py-4">
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="recipient" className="text-right">
                Recipient
              </Label>
              <Input
                id="recipient"
                type="email"
                placeholder="recipient@example.com"
                value={emailDialog.recipientEmail}
                onChange={(e) => setEmailDialog(prev => ({ ...prev, recipientEmail: e.target.value }))}
                className="col-span-3"
              />
            </div>
            
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="subject" className="text-right">
                Subject
              </Label>
              <Input
                id="subject"
                value={emailDialog.subject}
                onChange={(e) => setEmailDialog(prev => ({ ...prev, subject: e.target.value }))}
                className="col-span-3"
              />
            </div>
            
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="timestamp" className="text-right">
                Include timestamp
              </Label>
              <div className="col-span-3 flex items-center space-x-2">
                <Switch
                  id="timestamp"
                  checked={emailDialog.includeTimestamp}
                  onCheckedChange={(checked) => setEmailDialog(prev => ({ ...prev, includeTimestamp: checked }))}
                />
                <Label htmlFor="timestamp">Add generation time to email</Label>
              </div>
            </div>
          </div>
          
          <DialogFooter>
            <Button type="button" variant="secondary" onClick={() => setEmailDialog(prev => ({ ...prev, isOpen: false }))}>
              Cancel
            </Button>
            <Button 
              type="submit" 
              onClick={handleSendEmail}
              disabled={!emailDialog.recipientEmail.trim() || !emailDialog.subject.trim()}
            >
              Send Email
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default Chat;
